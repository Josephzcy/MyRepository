cmake_minimum_required(VERSION 3.4.1)   //指定 cmake 的最小版本
project(demo)    PROJECT_BINARY_DIR 和 PROJECT_SOURCE_DIR    //设置项目名称
add_executable(demo demo.cpp) # 生成可执行文件     demo      demo.exe
add_library(common STATIC util.cpp) # 生成静态库   libcommon.a   common.lib
add_library(common SHARED util.cpp) # 生成动态库或共享库  libcommon.so   common.dll
add_subdirectory(math)   //指明本项目包含一个子目录math
target_link_libraries(demo MathFunctions)   //指明可执行文件demo需要连接一个名为 MathFunctions的链接库
target_link_libraries(demo libface.a)       // 指定链接动态库或静态库
target_link_libraries(demo libface.so)
target_link_libraries(demo                                    //指定链接多个库
    ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.a
    boost_system.a
    boost_thread
    pthread)
//指定链接库的路径
target_link_libraries(demo ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.a)
target_link_libraries(demo ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.so)

#指定编译包含的源文件
add_library(demo demo.cpp test.cpp util.cpp)    明确指定包含哪些源文件
aux_source_directory(dir VAR) 发现一个目录下所有的源代码文件并将列表存储在一个变量中
example:
	aux_source_directory(. SRC_LIST) # 搜索当前目录下的所有.cpp文件
	add_library(demo ${SRC_LIST}
自定义搜索规则：
file(GLOB SRC_LIST "*.cpp" "protocol/*.cpp")
add_library(demo ${SRC_LIST})
# 或者
file(GLOB SRC_LIST "*.cpp")
file(GLOB SRC_PROTOCOL_LIST "protocol/*.cpp")
add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})
# 或者
aux_source_directory(. SRC_LIST)
aux_source_directory(protocol SRC_PROTOCOL_LIST)
add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})

设置变量
set(SRC_LIST main.cpp test.cpp)             //set 直接设置变量的值
add_executable(demo ${SRC_LIST})

set(SRC_LIST main.cpp)                       //set 追加设置变量的值
set(SRC_LIST ${SRC_LIST} test.cpp)
add_executable(demo ${SRC_LIST})

set(SRC_LIST main.cpp)                      //list 追加或者删除变量的值
list(APPEND SRC_LIST test.cpp)
list(REMOVE_ITEM SRC_LIST main.cpp)
add_executable(demo ${SRC_LIST})

设置包含的目录
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_BINARY_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L${CMAKE_CURRENT_SOURCE_DIR}/libs")

link_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/libs            //设置链接库搜索目录

message(${PROJECT_SOURCE_DIR})                  //输出变量的值    

在工程中查找并使用其他程序库的方法
find_path(<VAR> name1 [path1 path2 ...])
该命令在参数 path* 指示的目录中查找文件 name1 并将查找到的路径保存在变量 VAR中
01 MESSAGE(STATUS "Using bundled Findlibdb.cmake...")
0203 find_path(
04   LIBDB_CXX_INCLUDE_DIR
05   db_cxx.h 
06   /usr/include/ 
07   /usr/local/include/ 
08   )
09 10－13行的意思是在目录 /usr/lib/ 和 /usr/local/lib/ 中寻找名称为 db_cxx 的链接库,并将结果保存在 LIBDB_CXX_LIBRARIES
10 find_library(
11   LIBDB_CXX_LIBRARIES NAMES  db_cxx
12   PATHS /usr/lib/ /usr/local/lib/
13   )
工程分类文件夹编译
cmake中的install其实就是一个将编译好的可执行文件或者是生成的库文件将它放到系统对应的位置，比如说可执行文件直接要放到bin目录下面，so库文件要放在对应的lib目录下面         
